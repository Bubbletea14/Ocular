{
	"info": {
		"_postman_id": "1d19af90-9140-44c7-84b2-96c256e05975",
		"name": "User Test",
		"description": "# ðŸš€ Get started here for the User Testing\n\nIn this test we will go through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to start it?**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n``` json\n{\n    \"id\": 3,\n    \"username\": \"User2\",\n    \"password\": \"333\",\n    \"dob\": \"2011-03-04\",\n    \"email\": \"User2.User2@User2.com\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33918129"
	},
	"item": [
		{
			"name": "Get All User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/Users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const expectedResult = pm.globals.get(\"expectedResult\");\r",
							"var reqeusBody = request.data;\r",
							"requestBody = JSON.parse(reqeusBody);\r",
							"\r",
							"pm.test(\"Response Body structure is valid\", ()=> {\r",
							"    pm.expect(response).to.eql(expectedResult);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body is valid\", ()=> {\r",
							"    pm.expect(response).to.eql(requestBody);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set(\"expectedResult\", [\r",
							"    {\r",
							"        \"id\": 1,\r",
							"        \"username\": \"User1\",\r",
							"        \"password\": \"111\",\r",
							"        \"dob\": \"2010-08-05\",\r",
							"        \"email\": \"User1.User1@User1.com\"\r",
							"    },\r",
							"    {\r",
							"        \"id\": 2,\r",
							"        \"username\": \"User2\",\r",
							"        \"password\": \"222\",\r",
							"        \"dob\": \"2011-01-03\",\r",
							"        \"email\": \"User2.User2@User2.com\"\r",
							"    }\r",
							"]);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"id\": 1,\r\n        \"username\": \"User1\",\r\n        \"password\": \"111\",\r\n        \"dob\": \"2010-08-05\",\r\n        \"email\": \"User1.User1@User1.com\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"username\": \"User2\",\r\n        \"password\": \"222\",\r\n        \"dob\": \"2011-01-03\",\r\n        \"email\": \"User2.User2@User2.com\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/Users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set(\"expectedResult\", (\r",
							"    {\r",
							"    \"id\": 3,\r",
							"    \"username\": \"User3\",\r",
							"    \"password\": \"333\",\r",
							"    \"dob\": \"2011-03-04\",\r",
							"    \"email\": \"User3.User3@User3.com\"\r",
							"    }\r",
							"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const response = pm.response.json();",
							"const expectedResult = pm.globals.get(\"expectedResult\");",
							"var reqeusBody = request.data;",
							"requestBody = JSON.parse(reqeusBody);",
							"",
							"pm.test(\"Response Body structure is valid\", ()=> {",
							"    pm.expect(response).to.eql(expectedResult);",
							"});",
							"",
							"pm.test(\"Response Body is valid\", ()=> {",
							"    pm.expect(response).to.eql(requestBody);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 3,\n    \"username\": \"User3\",\n    \"password\": \"333\",\n    \"dob\": \"2011-03-04\",\n    \"email\": \"User3.User3@User3.com\"\n}\n\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/Users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"Users"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							"",
							"const response = pm.response.json();",
							"const expectedResult = pm.globals.get(\"expectedResult\");",
							"var reqeusBody = request.data;",
							"requestBody = JSON.parse(reqeusBody);",
							"",
							"pm.test(\"Response Body structure is valid\", ()=> {",
							"    pm.expect(response).to.eql(expectedResult);",
							"});",
							"",
							"pm.test(\"Response Body is valid\", ()=> {",
							"    pm.expect(response).to.eql(requestBody);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set(\"expectedResult\", (\r",
							"    {\r",
							"\t\"id\": 3,\r",
							"    \"username\": \"User4\",\r",
							"    \"password\": \"444\",\r",
							"    \"dob\": \"2011-01-03\",\r",
							"    \"email\": \"User4.User4@User4.com\"\r",
							"    }\r",
							"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\": 3,\n    \"username\": \"User4\",\n    \"password\": \"444\",\n    \"dob\": \"2011-01-03\",\n    \"email\": \"User4.User4@User4.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/Users/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"Users",
						"3"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set(\"expectedResult\", true);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							"",
							"const response = pm.response.json();",
							"const expectedResult = pm.globals.get(\"expectedResult\");",
							"",
							"pm.test(\"Response Body structure is valid\", ()=> {",
							"    pm.expect(response).to.eql(expectedResult);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"id\": 1,\r\n        \"username\": \"User1\",\r\n        \"password\": \"111\",\r\n        \"dob\": \"2010-08-05\",\r\n        \"email\": \"User1.User1@User1.com\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/Users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"Users",
						"1"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}